// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Future = require("reason-future/src/Future.bs.js");
var Helpers$IncrementalSearch = require("./Helpers.bs.js");

function IncrementalSearch(D) {
  var IncrementalSearch$IncrementalSearch = function (Props) {
    var defaultText = Props.defaultText;
    var searchDelay = Props.searchDelay;
    var searchResultView = Props.searchResultView;
    var match = React.useReducer((function (state, action) {
            if (typeof action === "number") {
              return {
                      text: state.text,
                      entities: /* Loading */1,
                      queueGetEntitesCommand: state.queueGetEntitesCommand
                    };
            }
            switch (action.TAG | 0) {
              case /* InputText */0 :
                  var text = action._0;
                  return {
                          text: text,
                          entities: state.entities,
                          queueGetEntitesCommand: List.concat({
                                hd: state.queueGetEntitesCommand,
                                tl: {
                                  hd: {
                                    hd: text,
                                    tl: /* [] */0
                                  },
                                  tl: /* [] */0
                                }
                              })
                        };
              case /* CompletedFindEntities */1 :
                  return {
                          text: state.text,
                          entities: {
                            _0: action._0,
                            [Symbol.for("name")]: "Done"
                          },
                          queueGetEntitesCommand: state.queueGetEntitesCommand
                        };
              case /* Dequeue */2 :
                  return action._0;
              
            }
          }), {
          text: Helpers$IncrementalSearch.$$Option.withDefault("", defaultText),
          entities: /* NotAsked */0,
          queueGetEntitesCommand: /* [] */0
        });
    var dispatch = match[1];
    var state = match[0];
    var delay = Helpers$IncrementalSearch.$$Option.withDefault(0.0, searchDelay);
    var text = state.text;
    var match$1 = state.entities;
    var tmp;
    if (typeof match$1 === "number") {
      tmp = match$1 !== 0 ? "Loading" : "Not Asked";
    } else {
      var entities = match$1._0;
      tmp = entities.TAG === /* Ok */0 ? Curry._1(searchResultView, entities._0) : "Request failed";
    }
    return React.createElement("div", undefined, React.createElement("input", {
                    value: text,
                    onInput: (function (e) {
                        var text = e.target.value;
                        Curry._1(dispatch, {
                              TAG: 0,
                              _0: text,
                              [Symbol.for("name")]: "InputText"
                            });
                        setTimeout((function (param) {
                                var match = state.queueGetEntitesCommand;
                                var state$1;
                                if (match) {
                                  var tail = match.tl;
                                  if (tail) {
                                    state$1 = {
                                      text: state.text,
                                      entities: state.entities,
                                      queueGetEntitesCommand: tail
                                    };
                                  } else {
                                    Future.get(Curry._1(D.findEntities, match.hd), (function (entities) {
                                            console.log("handleCommand entities", entities);
                                            return Curry._1(dispatch, {
                                                        TAG: 1,
                                                        _0: entities,
                                                        [Symbol.for("name")]: "CompletedFindEntities"
                                                      });
                                          }));
                                    state$1 = {
                                      text: state.text,
                                      entities: state.entities,
                                      queueGetEntitesCommand: /* [] */0
                                    };
                                  }
                                } else {
                                  state$1 = state;
                                }
                                return Curry._1(dispatch, {
                                            TAG: 2,
                                            _0: state$1,
                                            [Symbol.for("name")]: "Dequeue"
                                          });
                              }), Math.floor(delay) | 0);
                        
                      })
                  }), tmp);
  };
  return {
          make: IncrementalSearch$IncrementalSearch
        };
}

exports.IncrementalSearch = IncrementalSearch;
/* react Not a pure module */
