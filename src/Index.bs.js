// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Future = require("reason-future/src/Future.bs.js");
var ReactDOMRe = require("reason-react/src/legacy/ReactDOMRe.bs.js");
var Helpers$IncrementalSearch = require("./Search/Helpers.bs.js");
var IncrementalSearch$IncrementalSearch = require("./Search/IncrementalSearch.bs.js");
var IncrementalSearchCompat$IncrementalSearch = require("./Search/IncrementalSearchCompat.bs.js");

var allEntities = {
  hd: "Apple",
  tl: {
    hd: "Banana",
    tl: {
      hd: "All",
      tl: {
        hd: "Berry",
        tl: /* [] */0
      }
    }
  }
};

function findEntities(text) {
  return new Promise((function (resolve, param) {
                return resolve(List.filter(function (__x) {
                                  return Helpers$IncrementalSearch.$$String.contain(__x, text);
                                })(allEntities));
              }));
}

var TextIncrementalSearchDef = {
  allEntities: allEntities,
  findEntities: findEntities
};

var allEntities$1 = {
  hd: "Apple",
  tl: {
    hd: "Banana",
    tl: {
      hd: "All",
      tl: {
        hd: "Berry",
        tl: /* [] */0
      }
    }
  }
};

function findEntities$1(text) {
  return Future.make(undefined, (function (resolve) {
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: List.filter(function (__x) {
                                    return Helpers$IncrementalSearch.$$String.contain(__x, text);
                                  })(allEntities$1),
                            [Symbol.for("name")]: "Ok"
                          });
              }));
}

var TextIncrementalSearchDefHooks = {
  allEntities: allEntities$1,
  findEntities: findEntities$1
};

var TextIncrementalSearch = IncrementalSearch$IncrementalSearch.IncrementalSearch({
      findEntities: findEntities$1
    });

var TextIncrementalSearchCompat = IncrementalSearchCompat$IncrementalSearch.IncrementalSearch({
      findEntities: findEntities
    });

ReactDOMRe.renderToElementWithId(React.createElement("div", undefined, React.createElement("header", {
              "aria-level": 1,
              role: "heading"
            }, "Incremental Future"), React.createElement(TextIncrementalSearch.make, {
              searchResultView: (function (results) {
                  console.log(results);
                  return React.createElement("ul", undefined, $$Array.of_list(List.map((function (text) {
                                        return React.createElement("li", {
                                                    key: text
                                                  }, text);
                                      }), results)));
                })
            }), React.createElement("header", {
              "aria-level": 1,
              role: "heading"
            }, "Incremental Compat"), React.createElement(TextIncrementalSearchCompat.make, {
              searchResultView: (function (results) {
                  return React.createElement("ul", undefined, $$Array.of_list(List.map((function (text) {
                                        return React.createElement("li", {
                                                    key: text
                                                  }, text);
                                      }), results)));
                })
            })), "index");

exports.TextIncrementalSearchDef = TextIncrementalSearchDef;
exports.TextIncrementalSearchDefHooks = TextIncrementalSearchDefHooks;
exports.TextIncrementalSearch = TextIncrementalSearch;
exports.TextIncrementalSearchCompat = TextIncrementalSearchCompat;
/* TextIncrementalSearch Not a pure module */
