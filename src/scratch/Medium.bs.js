// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function conversion(converter, acc, item) {
  return acc + (Curry._1(converter, item) + ", ");
}

function stringOfList(items, stringify) {
  var reducerFcn = function (param, param$1) {
    return conversion(stringify, param, param$1);
  };
  return Belt_List.reduce(items, "[", reducerFcn) + "]";
}

function isMedium(target, search) {
  return new RegExp(search).test(target);
}

function contain(target, search) {
  return new RegExp(search).test(target);
}

var orderList = {
  hd: "Apple",
  tl: {
    hd: "Banana",
    tl: {
      hd: "All",
      tl: {
        hd: "Berry",
        tl: /* [] */0
      }
    }
  }
};

function mediums(text) {
  return Belt_List.keep(orderList, (function (param) {
                return new RegExp(param).test(text);
              }));
}

console.log(Belt_List.keep(orderList, (function (param) {
            return new RegExp(param).test("a");
          })));

console.log(List.filter(function (__x) {
            return new RegExp("a").test(__x);
          })({
          hd: "Apple",
          tl: {
            hd: "Banana",
            tl: {
              hd: "All",
              tl: {
                hd: "Berry",
                tl: /* [] */0
              }
            }
          }
        }));

var allEntities = {
  hd: "Apple",
  tl: {
    hd: "Banana",
    tl: {
      hd: "All",
      tl: {
        hd: "Berry",
        tl: /* [] */0
      }
    }
  }
};

function parseJsonResult(text) {
  var result = {
    TAG: 0,
    _0: List.filter(function (__x) {
            return new RegExp(text).test(__x);
          })(allEntities),
    [Symbol.for("name")]: "Ok"
  };
  var value;
  try {
    value = result;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: 1,
            _0: exn,
            [Symbol.for("name")]: "Error"
          };
  }
  return {
          TAG: 0,
          _0: value._0,
          [Symbol.for("name")]: "Ok"
        };
}

console.log(parseJsonResult("a"));

function findEntities(text) {
  return Future.make(undefined, (function (resolve) {
                console.log(text);
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: List.filter(function (__x) {
                                    return new RegExp(text).test(__x);
                                  })(allEntities),
                            [Symbol.for("name")]: "Ok"
                          });
              }));
}

console.log("Future.get", Future.get(findEntities("a"), (function (payload) {
            console.log(payload);
            
          })));

function findEntities$1(text) {
  return Future.make(undefined, (function (resolve) {
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: List.filter(function (__x) {
                                    return new RegExp(text).test(__x);
                                  })(allEntities),
                            [Symbol.for("name")]: "Ok"
                          });
              }));
}

console.log("Future.get", Future.get(findEntities$1("a"), (function (payload) {
            console.log(payload);
            
          })));

var future = Future.make(undefined, (function (resolve) {
        return Curry._1(resolve, parseJsonResult("a"));
      }));

Future.get(future, (function (x) {
        console.log("incr(future2Counter)");
        console.log(x);
        
      }));

var future$1 = Future.make(undefined, (function (resolve) {
        return Curry._1(resolve, findEntities$1("a"));
      }));

var future2 = Future.get(future$1, (function (x) {
        console.log("incr(future2Counter)");
        console.log(x);
        
      }));

exports.conversion = conversion;
exports.stringOfList = stringOfList;
exports.isMedium = isMedium;
exports.contain = contain;
exports.orderList = orderList;
exports.mediums = mediums;
exports.allEntities = allEntities;
exports.parseJsonResult = parseJsonResult;
exports.findEntities = findEntities$1;
exports.future = future$1;
exports.future2 = future2;
/*  Not a pure module */
